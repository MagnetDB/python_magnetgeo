Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 python-magnetgeo (0.3.2-1) UNRELEASED; urgency=medium
 .
   * sync with repo
Author: Christophe Trophime <christophe.trophime@lncmi.cnrs.fr>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2023-07-05

--- python-magnetgeo-0.3.2.orig/python_magnetgeo/InnerCurrentLead.py
+++ python-magnetgeo-0.3.2/python_magnetgeo/InnerCurrentLead.py
@@ -4,7 +4,6 @@
 """
 Provides Inner and OuterCurrentLead class
 """
-from typing import List
 
 import json
 import yaml
@@ -26,7 +25,7 @@ class InnerCurrentLead(yaml.YAMLObject):
     def __init__(
         self,
         name: str,
-        r: List[float],
+        r: list[float],
         h: float = 0.0,
         holes: list = [],
         support: list = [],
--- python-magnetgeo-0.3.2.orig/python_magnetgeo/OuterCurrentLead.py
+++ python-magnetgeo-0.3.2/python_magnetgeo/OuterCurrentLead.py
@@ -4,7 +4,6 @@
 """
 Provides Inner and OuterCurrentLead class
 """
-from typing import List
 
 import os
 import json
@@ -27,7 +26,7 @@ class OuterCurrentLead(yaml.YAMLObject):
     def __init__(
         self,
         name: str,
-        r: List[float] = [],
+        r: list[float] = [],
         h: float = 0.0,
         bar: list = [],
         support: list = [],
--- python-magnetgeo-0.3.2.orig/python_magnetgeo/Ring.py
+++ python-magnetgeo-0.3.2/python_magnetgeo/Ring.py
@@ -5,7 +5,6 @@
 Provides definition for Ring:
 
 """
-from typing import List
 
 import json
 import yaml
@@ -27,8 +26,8 @@ class Ring(yaml.YAMLObject):
     def __init__(
         self,
         name: str,
-        r: List[float],
-        z: List[float],
+        r: list[float],
+        z: list[float],
         n: int = 0,
         angle: float = 0,
         BPside: bool = True,
--- python-magnetgeo-0.3.2.orig/python_magnetgeo/Screen.py
+++ python-magnetgeo-0.3.2/python_magnetgeo/Screen.py
@@ -6,7 +6,6 @@ Provides definition for Screen:
 
 * Geom data: r, z
 """
-from typing import List
 
 import json
 import yaml
@@ -22,7 +21,7 @@ class Screen(yaml.YAMLObject):
 
     yaml_tag = "Screen"
 
-    def __init__(self, name: str, r: list, z: list):
+    def __init__(self, name: str, r: list[float], z: list[float]):
         """
         initialize object
         """
@@ -46,7 +45,7 @@ class Screen(yaml.YAMLObject):
 
     def get_names(
         self, mname: str, is2D: bool = False, verbose: bool = False
-    ) -> List[str]:
+    ) -> list[str]:
         """
         return names for Markers
         """
@@ -135,7 +134,7 @@ class Screen(yaml.YAMLObject):
         # TODO take into account Mandrin and Isolation even if detail="None"
         return (self.r, self.z)
 
-    def intersect(self, r: List[float], z: List[float]) -> bool:
+    def intersect(self, r: list[float], z: list[float]) -> bool:
         """
         Check if intersection with rectangle defined by r,z is empty or not
 
--- python-magnetgeo-0.3.2.orig/python_magnetgeo/Shape.py
+++ python-magnetgeo-0.3.2/python_magnetgeo/Shape.py
@@ -9,7 +9,6 @@ Provides definiton for Helix:
 * Model 3D: actual 3D CAD
 * Shape: definition of Shape eventually added to the helical cut
 """
-from typing import List
 
 import json
 import yaml
@@ -39,9 +38,9 @@ class Shape(yaml.YAMLObject):
         self,
         name: str,
         profile: str,
-        length: List[float] = [0.0],
-        angle: List[float] = [0.0],
-        onturns: List[int] = [1],
+        length: list[float] = [0.0],
+        angle: list[float] = [0.0],
+        onturns: list[int] = [1],
         position: str = "ABOVE",
     ):
         """
--- python-magnetgeo-0.3.2.orig/python_magnetgeo/Supras.py
+++ python-magnetgeo-0.3.2/python_magnetgeo/Supras.py
@@ -2,7 +2,6 @@
 # encoding: UTF-8
 
 """defines Supra Insert structure"""
-from typing import List
 
 import json
 import yaml
@@ -52,7 +51,7 @@ class Supras(yaml.YAMLObject):
 
     def get_names(
         self, mname: str, is2D: bool = False, verbose: bool = False
-    ) -> List[str]:
+    ) -> list[str]:
         """
         return names for Markers
         """
